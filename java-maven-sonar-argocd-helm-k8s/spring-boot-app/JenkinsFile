pipeline {
  agent {
    // Use Maven + JDK 17 so Sonar (class file v61) works
    docker {
      image 'maven:3.9.9-eclipse-temurin-17'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
    }
  }

  environment {
    // ---- Git repo you own/push to ----
    GIT_USER_NAME = 'Aravindkasireddy'
    GIT_REPO_NAME = 'Jenkins-Zero-To-Hero'
    GIT_REPO_URL  = "https://github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git"

    // ---- SonarQube ----
    SONAR_URL = 'http://54.227.226.22:9000'

    // ---- Docker image tag ----
    DOCKER_IMAGE = "abhishekf5/ultimate-cicd:${BUILD_NUMBER}"

    // Paths used below
    APP_DIR   = 'java-maven-sonar-argocd-helm-k8s/spring-boot-app'
    MANIFESTS = 'java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests'
  }

  stages {
    stage('Checkout') {
      steps {
        checkout([$class: 'GitSCM',
          branches: [[name: '*/main']],
          userRemoteConfigs: [[url: "${GIT_REPO_URL}"]]
        ])
        sh 'git rev-parse --short HEAD'
      }
    }

    stage('Build and Test') {
      steps {
        sh '''
          set -e
          mvn -v    # verify Java 17 in the container
          ls -ltr
          cd "${APP_DIR}"
          mvn -B clean package
        '''
      }
    }

    stage('Static Code Analysis') {
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh '''
            set -e
            cd "${APP_DIR}"
            # pin the Sonar Maven plugin version explicitly
            mvn -B org.sonarsource.scanner.maven:sonar-maven-plugin:4.0.0.4121:sonar \
              -Dsonar.host.url="${SONAR_URL}" \
              -Dsonar.login="${SONAR_AUTH_TOKEN}"
          '''
        }
      }
    }

    stage('Build and Push Docker Image') {
      environment {
        REGISTRY = 'https://index.docker.io/v1/'
      }
      steps {
        script {
          sh '''
            set -e
            cd "${APP_DIR}"
            docker build -t "${DOCKER_IMAGE}" .
          '''
          docker.withRegistry(env.REGISTRY, 'docker-cred') {
            docker.image("${DOCKER_IMAGE}").push()
          }
        }
      }
    }

    stage('Update Deployment File') {
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          sh '''
            set -e
            git config user.email "abhishek.xyz@gmail.com"
            git config user.name  "${GIT_USER_NAME}"

            # bump image tag in deployment manifest
            sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" "${MANIFESTS}/deployment.yml"

            git add "${MANIFESTS}/deployment.yml"
            git commit -m "Update deployment image to version ${BUILD_NUMBER}" || echo "No changes to commit."
            git push "https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}" HEAD:main
          '''
        }
      }
    }
  }
}
